# DreamWalk Backend Setup Instructions for EC2
# ================================================

## 🎯 OVERVIEW
This EC2 server will handle:
- REST API for Characters, Devices, and Sessions management  
- WebSocket connections for real-time dashboard updates
- OpenAI ChatGPT integration for character responses
- ElevenLabs integration for text-to-speech conversion
- Device registration and management for Raspberry Pi clients
- Supabase database integration with real-time subscriptions

## 🏗️ SERVER REQUIREMENTS

### System Requirements
- Ubuntu 22.04 LTS (recommended)
- Node.js 18.x or higher
- PM2 for process management
- Nginx for reverse proxy (optional but recommended)

### Security Group Settings
- Port 22: SSH access
- Port 80: HTTP (if using Nginx)
- Port 443: HTTPS (if using SSL)
- Port 3001: Express.js API server
- Port 3002: WebSocket server
- Custom ports for your specific needs

## 🚀 INITIAL SERVER SETUP

### 1. Update System
```bash
sudo apt update && sudo apt upgrade -y
sudo apt install curl wget git build-essential -y
```

### 2. Install Node.js
```bash
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs
node --version  # Verify installation
npm --version
```

### 3. Install PM2 (Process Manager)
```bash
sudo npm install -g pm2
```

## 📁 BACKEND PROJECT STRUCTURE

Create this folder structure on your EC2:

```
/home/ubuntu/dreamwalk-backend/
├── src/
│   ├── routes/
│   │   ├── characters.ts      # Character CRUD operations
│   │   ├── devices.ts         # Device management
│   │   ├── sessions.ts        # Live session tracking
│   │   ├── voices.ts          # ElevenLabs voice management
│   │   └── status.ts          # Backend health check
│   ├── middleware/
│   │   ├── auth.ts            # API authentication
│   │   ├── cors.ts            # CORS configuration
│   │   └── validation.ts      # Request validation
│   ├── services/
│   │   ├── openai.ts          # OpenAI ChatGPT integration
│   │   ├── elevenlabs.ts      # ElevenLabs TTS integration
│   │   ├── supabase.ts        # Supabase client setup
│   │   └── realtime.ts        # Real-time subscriptions
│   ├── websocket/
│   │   └── server.ts          # WebSocket server for real-time updates
│   ├── types/
│   │   └── index.ts           # TypeScript type definitions
│   └── server.ts              # Main Express server
├── package.json
├── tsconfig.json
├── .env                       # Environment variables
├── ecosystem.config.js        # PM2 configuration
└── README.md
```

## 🔧 ENVIRONMENT VARIABLES (.env file)

Create a `.env` file with these required variables:

```env
# Server Configuration
NODE_ENV=production
PORT=3001
WEBSOCKET_PORT=3002

# Frontend URL (Your Vercel deployment)
FRONTEND_URL=https://your-app.vercel.app
CORS_ORIGINS=https://your-app.vercel.app,http://localhost:3000

# Supabase Configuration
SUPABASE_URL=https://nbawhiamdwsagnwdfmin.supabase.co
SUPABASE_ANON_KEY=your-supabase-anon-key-here
SUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key-here

# Database Connection (Use Transaction Pooler for serverless)
DATABASE_URL=postgresql://postgres.nbawhiamdwsagnwdfmin:[YOUR-PASSWORD]@aws-0-us-west-1.pooler.supabase.com:6543/postgres

# API Keys
OPENAI_API_KEY=sk-your-openai-api-key-here
ELEVENLABS_API_KEY=your-elevenlabs-api-key-here

# Security
JWT_SECRET=your-super-secure-jwt-secret-here
API_KEY=your-backend-api-key-for-frontend-auth

# Logging
LOG_LEVEL=info
```

## 📦 PACKAGE.JSON REQUIREMENTS

Your backend needs these dependencies:

```json
{
  "name": "dreamwalk-backend",
  "version": "1.0.0",
  "main": "dist/server.js",
  "scripts": {
    "dev": "nodemon src/server.ts",
    "build": "tsc",
    "start": "node dist/server.js",
    "pm2:start": "pm2 start ecosystem.config.js",
    "pm2:stop": "pm2 stop dreamwalk-backend"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.1.0",
    "morgan": "^1.10.0",
    "dotenv": "^16.3.1",
    "jsonwebtoken": "^9.0.2",
    "bcrypt": "^5.1.1",
    "express-rate-limit": "^7.1.5",
    "express-validator": "^7.0.1",
    "ws": "^8.14.2",
    "openai": "^4.20.1",
    "@supabase/supabase-js": "^2.38.4",
    "pg": "^8.11.3"
  },
  "devDependencies": {
    "@types/node": "^20.9.0",
    "@types/express": "^4.17.21",
    "@types/cors": "^2.8.17",
    "@types/morgan": "^1.9.9",
    "@types/jsonwebtoken": "^9.0.5",
    "@types/bcrypt": "^5.0.2",
    "@types/ws": "^8.5.9",
    "@types/pg": "^8.10.7",
    "typescript": "^5.2.2",
    "nodemon": "^3.0.2",
    "ts-node": "^10.9.1"
  }
}
```

## 🛠️ REQUIRED API ENDPOINTS

### The frontend expects these endpoints:

#### Characters Management
- `GET /api/characters` - List all characters
- `POST /api/characters` - Create new character
- `PUT /api/characters/:id` - Update character
- `DELETE /api/characters/:id` - Delete character
- `POST /api/characters/:id/deploy` - Deploy character to device

#### Devices Management
- `GET /api/devices` - List all registered devices
- `POST /api/devices/register` - Register new device
- `PUT /api/devices/:id/status` - Update device status
- `DELETE /api/devices/:id` - Remove device

#### Sessions Management
- `GET /api/sessions` - Get active sessions
- `GET /api/sessions/history` - Get session history
- `POST /api/sessions` - Start new session
- `PUT /api/sessions/:id/end` - End session

#### Voices Management
- `GET /api/voices` - List available ElevenLabs voices
- `POST /api/voices/sync` - Sync voices from ElevenLabs
- `PUT /api/voices/:id` - Update voice settings

#### System Status
- `GET /api/status` - Backend health check
- `GET /api/status/services` - Check external service status

#### Analytics
- `GET /api/analytics/dashboard` - Dashboard statistics
- `GET /api/analytics/performance` - Performance metrics

## 🔄 WEBSOCKET EVENTS

### Frontend → Backend Events:
- `join_dashboard` - Subscribe to dashboard updates
- `ping` - Keep connection alive

### Backend → Frontend Events:
- `dashboard_update` - Real-time stats update
- `session_started` - New session notification
- `session_ended` - Session ended notification  
- `device_status_change` - Device online/offline
- `character_deployed` - Character deployment notification

## 🔗 SUPABASE INTEGRATION

### Database Tables (Already Created):
- `characters` - AI character profiles and settings
- `devices` - Registered client devices
- `sessions` - Active and historical sessions
- `interactions` - Individual chat interactions
- `voices` - ElevenLabs voice models
- `error_logs` - Application error tracking

### Real-time Subscriptions Setup:
```typescript
// src/services/supabase.ts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

export const supabase = createClient(supabaseUrl, supabaseServiceKey)

// Subscribe to real-time changes
export const setupRealtimeSubscriptions = (io: any) => {
  // Sessions changes
  supabase
    .channel('sessions')
    .on('postgres_changes', { event: '*', schema: 'public', table: 'sessions' }, 
      (payload) => {
        io.emit('session_update', payload)
      })
    .subscribe()

  // Device status changes  
  supabase
    .channel('devices')
    .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'devices' },
      (payload) => {
        io.emit('device_status_change', payload)
      })
    .subscribe()
}
```

### OpenAI Integration
- Character persona management using `characters` table
- Real-time chat completions
- Response streaming to ElevenLabs
- Usage tracking and rate limiting
- Store interactions in `interactions` table

### ElevenLabs Integration
- Voice synthesis from OpenAI responses
- Voice model management using `voices` table
- Audio streaming to client devices
- Usage monitoring
- Voice settings per character

## 🚦 STARTUP COMMANDS

### Development Mode
```bash
cd /home/ubuntu/dreamwalk-backend
npm install
npm run build
npm run dev
```

### Production Mode with PM2
```bash
cd /home/ubuntu/dreamwalk-backend
npm install
npm run build
npm run pm2:start

# Monitor logs
pm2 logs dreamwalk-backend

# Monitor status
pm2 status
```

## 🔒 SECURITY CHECKLIST

- [ ] Firewall configured (ufw or security groups)
- [ ] SSL certificate installed (Let's Encrypt recommended)
- [ ] Environment variables secured
- [ ] Rate limiting implemented
- [ ] CORS properly configured for Vercel domain
- [ ] Supabase RLS (Row Level Security) enabled
- [ ] API authentication implemented
- [ ] Input validation on all endpoints
- [ ] Helmet.js security headers
- [ ] Regular security updates scheduled

## 🔌 FRONTEND CONNECTION

### Update Frontend Environment Variables:
Add to your Vercel environment variables:

```env
NEXT_PUBLIC_API_URL=https://your-ec2-domain.com:3001
NEXT_PUBLIC_WS_URL=wss://your-ec2-domain.com:3002
NEXT_PUBLIC_API_KEY=your-backend-api-key-for-frontend-auth

# Optional: Direct Supabase connection for read-only operations
NEXT_PUBLIC_SUPABASE_URL=https://nbawhiamdwsagnwdfmin.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key-here
```

### Frontend API Integration Points:
1. Dashboard stats polling every 30 seconds
2. WebSocket connection for real-time updates
3. Character CRUD operations
4. Device status monitoring
5. Session management
6. Voice management

## 📊 MONITORING & LOGS

### Supabase Monitoring:
- Monitor database performance in Supabase dashboard
- Set up database alerts for connection limits
- Use Supabase logs for query performance analysis

### Application Monitoring:
```bash
# Install htop for monitoring
sudo apt install htop

# Monitor PM2 processes
pm2 monit
```

## 🚨 TROUBLESHOOTING

### Common Issues:
1. **Supabase connection**: Check DATABASE_URL and credentials
2. **CORS errors**: Verify FRONTEND_URL matches Vercel domain
3. **Real-time subscriptions**: Ensure WebSocket ports are open
4. **API key issues**: Verify OpenAI/ElevenLabs keys are valid
5. **WebSocket failures**: Check firewall/security group settings

### Health Check URL:
`GET https://your-ec2-domain.com:3001/api/status`

Expected response:
```json
{
  "status": "operational",
  "timestamp": "2024-01-01T12:00:00Z",
  "services": {
    "supabase": "connected",
    "openai": "operational", 
    "elevenlabs": "operational"
  },
  "database": {
    "characters": 0,
    "devices": 0,
    "sessions": 0
  }
}
```

## 📞 NEXT STEPS AFTER SETUP

1. Test Supabase connection with simple query
2. Set up real-time subscriptions
3. Test all API endpoints with Postman/curl
4. Verify WebSocket connections
5. Test OpenAI integration
6. Test ElevenLabs integration  
7. Update frontend API_URL to point to your EC2
8. Deploy and test end-to-end functionality
9. Set up monitoring and alerts
10. Configure automatic backups

## 📋 DEPLOYMENT CHECKLIST

- [ ] EC2 instance launched and accessible
- [ ] Node.js and dependencies installed
- [ ] Supabase credentials configured
- [ ] Environment variables configured
- [ ] Application built and running
- [ ] PM2 process manager configured
- [ ] Real-time subscriptions working
- [ ] Firewall/security groups configured
- [ ] SSL certificate installed (if using HTTPS)
- [ ] Frontend environment variables updated
- [ ] End-to-end testing completed
- [ ] Monitoring and logging configured

---

🎉 Once completed, your EC2 backend will be fully integrated with Supabase and your Next.js frontend on Vercel, providing real-time AI character interactions! 